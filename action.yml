name: Pipelines Execute
description: Run Pipelines Execute
inputs:
  working_directory:
    description: "The folder path to run Pipelines Execute in"
    required: true
  terragrunt_command:
    description: "The terragrunt command to run"
    required: true
    default: "plan"
  token:
    description: "The GitHub token for downloading the Gruntwork Pipelines binary and modules"
    required: true
  # The following are required for the terragrunt action
  tg_version:
    description: "Terragrunt version to install."
    required: true
    default: "0.48.1"
  tf_version:
    description: "Terraform version to install."
    required: true
    default: "1.0.11"
  tg_execution_parallelism_limit:
    # https://terragrunt.gruntwork.io/docs/features/execute-terraform-commands-on-multiple-modules-at-once/#limiting-the-module-execution-parallelism
    description: "Maximum number of concurrently executed Terraform modules during Terragrunt execution"
    required: false
    default: 0 # Ignored by pipelines-execute
  pipelines_cli_version:
    description: "The version of the Gruntwork Pipelines CLI to use"
    required: true
  infra_live_repo:
    description: "The name of the infrastructure-live repo to execute in"
    required: true
  infra_live_directory:
    description: "The name of the directory containing the infrastructure-live repo on disk"
    required: true
  infra_live_repo_branch:
    description: "The branch of the infrastructure-live repo to execute in"
    required: true
  gruntwork_config:
    description: "Contents of the Gruntwork config file"
    required: true

runs:
  using: "composite"
  steps:
    - name: Install Terraform and Terragrunt
      shell: bash
      env:
        TF_ENV_VERSION: v3.0.0
        TG_SWITCH_VERSION: 0.6.0
      run: |
        # Check if tfenv is installed, if not, install it
        if ! command -v tfenv &> /dev/null; then
          tfenv --version
          echo "Installing tfenv"
          git clone --depth=1 --branch ${TF_ENV_VERSION} https://github.com/tfutils/tfenv.git ~/.tfenv
        fi

        # Check if tgswitch is installed, if not, install it
        if ! command -v tgswitch &> /dev/null; then
          mkdir -p "${HOME}/tgswitch"
          wget -q https://github.com/warrensbox/tgswitch/releases/download/${TG_SWITCH_VERSION}/tgswitch_${TG_SWITCH_VERSION}_linux_amd64.tar.gz -O /tmp/tgswitch_${TG_SWITCH_VERSION}_linux_amd64.tar.gz
          tar -xzf /tmp/tgswitch_${TG_SWITCH_VERSION}_linux_amd64.tar.gz -C ${HOME}/tgswitch
          chmod u+x ${HOME}/tgswitch/tgswitch
          rm -rf /tmp/tgswitch_${TG_SWITCH_VERSION}_linux_amd64.tar.gz
        fi

        # Add tfenv and tgswitch to PATH variable
        export PATH=$PATH:$HOME/.tfenv/bin:$HOME/tgswitch

        # Install Terraform and Terragrunt
        tfenv install ${{ inputs.tf_version }}
        tfenv use ${{ inputs.tf_version }}
        tgswitch ${{ inputs.tg_version }}

    - name: Download Pipelines CLI
      uses: dsaltares/fetch-gh-release-asset@1.1.1
      with:
        repo: "gruntwork-io/pipelines-cli"
        version: "tags/${{ inputs.pipelines_cli_version }}"
        file: "pipelines_linux_amd64"
        target: "/tmp/pipelines"
        token: ${{ inputs.token }}

    - name: Install Pipelines CLI
      shell: bash
      run: |
        sudo mv /tmp/pipelines /usr/local/bin/pipelines
        sudo chmod +x /usr/local/bin/pipelines

    - name: Load Machine User Name
      id: load_machine_user
      env:
        GH_TOKEN: ${{ inputs.token }}
      shell: bash
      run: |
        echo "MACHINE_USER_NAME=$(gh api /user | jq .login)" >> "$GITHUB_OUTPUT"

    - name: Run Pipelines Execute
      id: execute
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.token }}
        MACHINE_USER_NAME: ${{ steps.load_machine_user.outputs.MACHINE_USER_NAME }}
      run: |
        # CD Infra-live directory && Run Pipelines-execute

        dir_before_execute=$(pwd) # Save current working directory to return to later
        cd ${{ inputs.infra_live_directory }}

        pipelines execute terragrunt \
          --working-directory ${{ inputs.working_directory }} \
          --command "${{ inputs.terragrunt_command }}" \
          --tg-parallelism-limit ${{ inputs.tg_execution_parallelism_limit }} \
          --infra-live-repo ${{ inputs.infra_live_repo }} \
          --infra-live-repo-branch ${{ inputs.infra_live_repo_branch }} \
          --deployment-branch ${{ env.DEPLOY_BRANCH_NAME }} \
          --gruntwork-config "${{ inputs.gruntwork_config }}"

        exit_code=$?

        cd $dir_before_execute # Return to original working directory

        exit $exit_code
